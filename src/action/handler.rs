use crate::action::Routine;

/// Wrapper for Vec<Routine> that handles execution of scheduled `Routine` structs
#[derive(Default)]
pub struct SchedRoutineHandler {
    /// Container for active `Routine` instances.
    ///
    /// `check_scheduled()` is the interface to attempt execution and clear this container.
    scheduled: Vec<Routine>

}

impl SchedRoutineHandler {
    /// Attempt to execute scheduled routines.
    ///
    /// Scheduled routines are generated by `PublisherInstance`, however, execution of this
    /// function should not be correllated with polling interval since the publisher schedules
    /// routines without regard to group interval. Therefore, this function should be executed as
    /// often as possible to maintain accuracy to publisher intention.
    /// 
    /// Any routines executed by `Routine::attempt()` are cleared from the `scheduled` container.
    pub fn check_scheduled(&mut self) {
        let mut executed = Vec::default();
        for (index, routine) in self.scheduled.iter().enumerate() {
            if routine.attempt() {
                executed.push(index);
            }
        }
        // remove completed
        for index in executed {
            self.scheduled.remove(index);
        }
    }
}
